name: release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

permissions:
  contents: write

env:
  GO_VERSION: "1.22.x"

jobs:
  linux-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install deps (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Build linux/amd64
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
            go build -trimpath -ldflags="-s -w" -o dist/tg-ip-sniffer-linux-amd64 ./cmd/sniffer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tg-ip-sniffer-linux-amd64
          path: dist/*

  linux-arm64:
    runs-on: ubuntu-24.04-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install deps (Linux ARM64)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Build linux/arm64
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
            go build -trimpath -ldflags="-s -w" -o dist/tg-ip-sniffer-linux-arm64 ./cmd/sniffer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tg-ip-sniffer-linux-arm64
          path: dist/*

  macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build darwin/arm64
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 \
            go build -trimpath -ldflags="-s -w" -o dist/tg-ip-sniffer-darwin-arm64 ./cmd/sniffer

      - name: Build darwin/amd64
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 \
            go build -trimpath -ldflags="-s - w" -o dist/tg-ip-sniffer-darwin-amd64 ./cmd/sniffer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tg-ip-sniffer-darwin
          path: dist/*

  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Npcap SDK
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $sdkUrl = "https://npcap.com/dist/npcap-sdk-1.15.zip"
          $dst = "$env:RUNNER_TEMP\npcap-sdk.zip"
          Invoke-WebRequest $sdkUrl -OutFile $dst
          Expand-Archive $dst -DestinationPath "$env:RUNNER_TEMP\npcap-sdk" -Force
          $sdkRoot = Get-ChildItem "$env:RUNNER_TEMP\npcap-sdk" | Where-Object { $_.PSIsContainer } | Select-Object -First 1
          "NPCAP_SDK=$($sdkRoot.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build windows/amd64
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          export CGO_CFLAGS="-I${NPCAP_SDK}\\Include"
          export CGO_LDFLAGS="-L${NPCAP_SDK}\\Lib\\x64 -lwpcap -lPacket"
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 \
            go build -trimpath -ldflags="-s -w" -o dist/tg-ip-sniffer-windows-amd64.exe ./cmd/sniffer

      - name: Build windows/arm64
        shell: bash
        run: |
          set -euo pipefail
          export CGO_CFLAGS="-I${NPCAP_SDK}\\Include"
          export CGO_LDFLAGS="-L${NPCAP_SDK}\\Lib\\ARM64 -lwpcap -lPacket"
          CGO_ENABLED=1 GOOS=windows GOARCH=arm64 \
            go build -trimpath -ldflags="-s -w" -o dist/tg-ip-sniffer-windows-arm64.exe ./cmd/sniffer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tg-ip-sniffer-windows
          path: dist/*

  release:
    needs:
      - linux-amd64
      - linux-arm64
      - macos
      - windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: tg-ip-sniffer-*
          merge-multiple: true
          path: dist

      - name: Show files
        run: ls -la dist

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
